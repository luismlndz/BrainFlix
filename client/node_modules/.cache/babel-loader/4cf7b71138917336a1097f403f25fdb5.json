{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nimport React, { useEffect, useState, useRef, useCallback, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport TimeAgo from 'javascript-time-ago';\nimport createVerboseDateFormatter from './helpers/verboseDateFormatter';\nimport { getDate } from './helpers/date';\nimport Cache from './helpers/cache';\nimport Updater from './Updater';\nimport { style as styleType } from './PropTypes';\n\nfunction ReactTimeAgo(_ref) {\n  var date = _ref.date,\n      future = _ref.future,\n      timeStyle = _ref.timeStyle,\n      round = _ref.round,\n      minTimeLeft = _ref.minTimeLeft,\n      tooltip = _ref.tooltip,\n      Component = _ref.component,\n      container = _ref.container,\n      wrapperComponent = _ref.wrapperComponent,\n      wrapperProps = _ref.wrapperProps,\n      locale = _ref.locale,\n      locales = _ref.locales,\n      formatVerboseDate = _ref.formatVerboseDate,\n      verboseDateFormat = _ref.verboseDateFormat,\n      updateInterval = _ref.updateInterval,\n      tick = _ref.tick,\n      nowProperty = _ref.now,\n      timeOffset = _ref.timeOffset,\n      polyfill = _ref.polyfill,\n      rest = _objectWithoutProperties(_ref, ['date', 'future', 'timeStyle', 'round', 'minTimeLeft', 'tooltip', 'component', 'container', 'wrapperComponent', 'wrapperProps', 'locale', 'locales', 'formatVerboseDate', 'verboseDateFormat', 'updateInterval', 'tick', 'now', 'timeOffset', 'polyfill']); // Get the list of preferred locales.\n\n\n  var preferredLocales = useMemo(function () {\n    // Convert `locale` to `locales`.\n    if (locale) {\n      locales = [locale];\n    } // Add `javascript-time-ago` default locale.\n\n\n    return locales.concat(TimeAgo.getDefaultLocale());\n  }, [locale, locales]); // Create `javascript-time-ago` formatter instance.\n\n  var timeAgo = useMemo(function () {\n    return getTimeAgo(preferredLocales, polyfill);\n  }, [preferredLocales, polyfill]); // The date or timestamp that was passed.\n  // Convert timestamp to `Date`.\n\n  date = useMemo(function () {\n    return getDate(date);\n  }, [date]); // Formats the `date`.\n\n  var formatDate = useCallback(function () {\n    var now = (nowProperty || Date.now()) - timeOffset;\n    var stopUpdates = void 0;\n\n    if (future) {\n      if (now >= date.getTime()) {\n        now = date.getTime();\n        stopUpdates = true;\n      }\n    }\n\n    if (minTimeLeft !== undefined) {\n      var maxNow = date.getTime() - minTimeLeft * 1000;\n\n      if (now > maxNow) {\n        now = maxNow;\n        stopUpdates = true;\n      }\n    }\n\n    var _timeAgo$format = timeAgo.format(date, timeStyle, {\n      getTimeToNextUpdate: true,\n      now: now,\n      future: future,\n      round: round\n    }),\n        _timeAgo$format2 = _slicedToArray(_timeAgo$format, 2),\n        formattedDate = _timeAgo$format2[0],\n        timeToNextUpdate = _timeAgo$format2[1];\n\n    if (stopUpdates) {\n      timeToNextUpdate = INFINITY;\n    } else {\n      // Legacy compatibility: there used to be an `updateInterval` property.\n      // That was before `getTimeToNextUpdate` feature was introduced in `javascript-time-ago`.\n      // A default interval of one minute is introduced because\n      // `getTimeToNextUpdate` feature may theoretically return `undefined`.\n      timeToNextUpdate = updateInterval || timeToNextUpdate || 60 * 1000; // A minute by default.\n    }\n\n    return [formattedDate, now + timeToNextUpdate];\n  }, [date, future, timeStyle, updateInterval, round, minTimeLeft, timeAgo, nowProperty]);\n  var formatDateRef = useRef();\n  formatDateRef.current = formatDate;\n\n  var _useMemo = useMemo(formatDate, []),\n      _useMemo2 = _slicedToArray(_useMemo, 2),\n      _formattedDate = _useMemo2[0],\n      _nextUpdateTime = _useMemo2[1];\n\n  var _useState = useState(_formattedDate),\n      _useState2 = _slicedToArray(_useState, 2),\n      formattedDate = _useState2[0],\n      setFormattedDate = _useState2[1]; // The component sets the \"verbose date\" tooltip after the component \n  // has mounted rather than on the first render. \n  // The reason is that otherwise React would complain that \n  // server-side-rendered markup doesn't match client-side-rendered one.\n\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      shouldSetTooltipText = _useState4[0],\n      setShouldSetTooltipText = _useState4[1];\n\n  var updater = useRef();\n  useEffect(function () {\n    if (tick) {\n      updater.current = Updater.add({\n        getNextValue: function getNextValue() {\n          return formatDateRef.current();\n        },\n        setValue: setFormattedDate,\n        nextUpdateTime: _nextUpdateTime\n      });\n      return function () {\n        return updater.current.stop();\n      };\n    }\n  }, [tick]);\n  useEffect(function () {\n    if (updater.current) {\n      updater.current.forceUpdate();\n    } else {\n      var _formatDate = formatDate(),\n          _formatDate2 = _slicedToArray(_formatDate, 1),\n          _formattedDate2 = _formatDate2[0];\n\n      setFormattedDate(_formattedDate2);\n    }\n  }, [formatDate]);\n  useEffect(function () {\n    setShouldSetTooltipText(true);\n  }, []); // Create verbose date formatter for the tooltip text.\n  // (only on client side, because tooltips aren't rendered \n  //  until triggered by user interaction)\n\n  var verboseDateFormatter = useMemo(function () {\n    if (typeof window !== 'undefined') {\n      return createVerboseDateFormatter(preferredLocales, verboseDateFormat);\n    }\n  }, [preferredLocales, verboseDateFormat]); // Format verbose date for the tooltip.\n  // (only on client side, because tooltips aren't rendered \n  //  until triggered by user interaction)\n\n  var verboseDate = useMemo(function () {\n    if (typeof window !== 'undefined') {\n      if (formatVerboseDate) {\n        return formatVerboseDate(date);\n      }\n\n      return verboseDateFormatter(date);\n    }\n  }, [date, formatVerboseDate, verboseDateFormatter]);\n  var result = React.createElement(Component, _extends({\n    date: date,\n    verboseDate: shouldSetTooltipText ? verboseDate : undefined,\n    tooltip: tooltip\n  }, rest), formattedDate);\n  var WrapperComponent = wrapperComponent || container;\n\n  if (WrapperComponent) {\n    return React.createElement(WrapperComponent, _extends({}, wrapperProps, {\n      verboseDate: shouldSetTooltipText ? verboseDate : undefined\n    }), result);\n  }\n\n  return result;\n}\n\nReactTimeAgo.propTypes = {\n  // The `date` or `timestamp`.\n  // E.g. `new Date()` or `1355972400000`.\n  date: PropTypes.oneOfType([PropTypes.instanceOf(Date), PropTypes.number]).isRequired,\n  // Preferred locale.\n  // Is 'en' by default.\n  // E.g. 'ru-RU'.\n  locale: PropTypes.string,\n  // Alternatively to `locale`, one could pass `locales`:\n  // A list of preferred locales (ordered).\n  // Will choose the first supported locale from the list.\n  // E.g. `['ru-RU', 'en-GB']`.\n  locales: PropTypes.arrayOf(PropTypes.string),\n  // If set to `true`, then will stop at \"zero point\"\n  // when going from future dates to past dates.\n  // In other words, even if the `date` has passed,\n  // it will still render as if `date` is `now`.\n  future: PropTypes.bool,\n  // Date/time formatting style.\n  // See `javascript-time-ago` docs on \"Styles\" for more info.\n  // E.g. 'round', 'round-minute', 'twitter', 'twitter-first-minute'.\n  timeStyle: styleType,\n  // `round` parameter of `javascript-time-ago`.\n  // See `javascript-time-ago` docs on \"Rounding\" for more info.\n  // Examples: \"round\", \"floor\".\n  round: PropTypes.string,\n  // If specified, the time won't \"tick\" past this threshold (in seconds).\n  // For example, if `minTimeLeft` is `60 * 60`\n  // then the time won't \"tick\" past \"in 1 hour\".\n  minTimeLeft: PropTypes.number,\n  // A React component to render the relative time label.\n  // Receives properties:\n  // * date: Date — The date.\n  // * verboseDate: string? — Formatted verbose date. Is always present on client, is always `undefined` on server (because tooltips aren't shown on server).\n  // * tooltip: boolean — The `tooltip` property of `<ReactTimeAgo/>` component.\n  // * children: string — The relative time label.\n  // * All \"unknown\" properties that have been passed to `<ReactTimeAgo/>` are passed through to this component.\n  component: PropTypes.elementType.isRequired,\n  // Whether to use HTML `tooltip` attribute to show a verbose date tooltip.\n  // Is `true` by default.\n  // Can be set to `false` to disable the native HTML `tooltip`.\n  tooltip: PropTypes.bool.isRequired,\n  // Verbose date formatter.\n  // By default it's `(date) => new Intl.DateTimeFormat(locale, {…}).format(date)`.\n  formatVerboseDate: PropTypes.func,\n  // `Intl.DateTimeFormat` format for formatting verbose date.\n  // See `Intl.DateTimeFormat` docs for more info.\n  verboseDateFormat: PropTypes.object,\n  // (deprecated)\n  // How often the component refreshes itself.\n  // Instead, consider using `getNextTimeToUpdate()` feature\n  // of `javascript-time-ago` styles.\n  updateInterval: PropTypes.oneOfType([PropTypes.number, PropTypes.arrayOf(PropTypes.shape({\n    threshold: PropTypes.number,\n    interval: PropTypes.number.isRequired\n  }))]),\n  // (deprecated).\n  // Set to `false` to disable automatic refresh of the component.\n  // Is `true` by default.\n  // I guess no one actually turns that off.\n  tick: PropTypes.bool,\n  // Allows setting a custom baseline for relative time measurement.\n  // https://gitlab.com/catamphetamine/react-time-ago/-/issues/4\n  now: PropTypes.number,\n  // Allows offsetting the `date` by an arbitrary amount of milliseconds.\n  // https://gitlab.com/catamphetamine/react-time-ago/-/issues/4\n  timeOffset: PropTypes.number,\n  // Pass `false` to use native `Intl.RelativeTimeFormat` / `Intl.PluralRules`\n  // instead of the polyfilled ones in `javascript-time-ago`.\n  polyfill: PropTypes.bool,\n  // (advanced)\n  // A React Component to wrap the resulting `<time/>` React Element.\n  // Receives `verboseDate` and `children` properties.\n  // Also receives `wrapperProps`, if they're passed.\n  // `verboseDate` can be used for displaying verbose date label\n  // in an \"on mouse over\" (or \"on touch\") tooltip.\n  // See the \"Tooltip\" readme section for more info.\n  // Another example could be having `wrapperComponent`\n  // being rerendered every time the component refreshes itself.\n  wrapperComponent: PropTypes.elementType,\n  // Custom `props` passed to `wrapperComponent`.\n  wrapperProps: PropTypes.object\n};\nReactTimeAgo.defaultProps = {\n  // No preferred locales.\n  locales: [],\n  // Use a `<time/>` tag by default.\n  component: Time,\n  // Use HTML `tooltip` attribute to show a verbose date tooltip.\n  tooltip: true,\n  // `Intl.DateTimeFormat` for verbose date.\n  // Example: \"Thursday, December 20, 2012, 7:00:00 AM GMT+4\"\n  verboseDateFormat: {\n    weekday: 'long',\n    day: 'numeric',\n    month: 'long',\n    year: 'numeric',\n    hour: 'numeric',\n    minute: '2-digit',\n    second: '2-digit' // timeZoneName: 'short'\n\n  },\n  // Automatically refreshes itself.\n  tick: true,\n  // No time offset.\n  timeOffset: 0 // The component schedules a next refresh every time it renders.\n  // There's no need to rerender this component unless its props change.\n\n};\nReactTimeAgo = React.memo(ReactTimeAgo);\nexport default ReactTimeAgo; // `setTimeout()` has a bug where it fires immediately\n// when the interval is longer than about `24.85` days.\n// https://stackoverflow.com/questions/3468607/why-does-settimeout-break-for-large-millisecond-delay-values\n\nvar SET_TIMEOUT_MAX_SAFE_INTERVAL = 2147483647;\n\nfunction getSafeTimeoutInterval(interval) {\n  return Math.min(interval, SET_TIMEOUT_MAX_SAFE_INTERVAL);\n} // A thousand years is practically a metaphor for \"infinity\".\n\n\nvar YEAR = 365 * 24 * 60 * 60 * 1000;\nvar INFINITY = 1000 * YEAR;\n\nfunction Time(_ref2) {\n  var date = _ref2.date,\n      verboseDate = _ref2.verboseDate,\n      tooltip = _ref2.tooltip,\n      children = _ref2.children,\n      rest = _objectWithoutProperties(_ref2, ['date', 'verboseDate', 'tooltip', 'children']);\n\n  var isoString = useMemo(function () {\n    return date.toISOString();\n  }, [date]);\n  return React.createElement('time', _extends({}, rest, {\n    dateTime: isoString,\n    title: tooltip ? verboseDate : undefined\n  }), children);\n}\n\nTime.propTypes = {\n  date: PropTypes.instanceOf(Date).isRequired,\n  verboseDate: PropTypes.string,\n  tooltip: PropTypes.bool.isRequired,\n  children: PropTypes.string.isRequired\n};\nvar TimeAgoCache = new Cache();\n\nfunction getTimeAgo(preferredLocales, polyfill) {\n  // `TimeAgo` instance creation is (hypothetically) assumed\n  // a lengthy operation so the instances are cached and reused.\n  // https://gitlab.com/catamphetamine/react-time-ago/-/issues/1\n  var key = String(preferredLocales) + ':' + String(polyfill);\n  return TimeAgoCache.get(key) || TimeAgoCache.put(key, new TimeAgo(preferredLocales, {\n    polyfill: polyfill\n  }));\n}","map":{"version":3,"sources":["../source/ReactTimeAgo.js"],"names":["style","date","future","timeStyle","round","minTimeLeft","tooltip","component","Component","container","wrapperComponent","wrapperProps","locale","locales","formatVerboseDate","verboseDateFormat","updateInterval","tick","now","nowProperty","timeOffset","polyfill","rest","preferredLocales","TimeAgo","timeAgo","getTimeAgo","getDate","formatDate","Date","stopUpdates","maxNow","formattedDate","timeToNextUpdate","getTimeToNextUpdate","formatDateRef","useRef","_formattedDate","_nextUpdateTime","useMemo","setFormattedDate","useState","shouldSetTooltipText","setShouldSetTooltipText","updater","useEffect","getNextValue","setValue","nextUpdateTime","verboseDateFormatter","createVerboseDateFormatter","verboseDate","result","WrapperComponent","ReactTimeAgo","PropTypes","threshold","interval","isRequired","object","weekday","day","month","year","hour","minute","second","React","SET_TIMEOUT_MAX_SAFE_INTERVAL","Math","YEAR","INFINITY","children","isoString","Time","TimeAgoCache","key","String"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,SAAA,EAAA,QAAA,EAAA,MAAA,EAAA,WAAA,EAAA,OAAA,QAAA,OAAA;AACA,OAAA,SAAA,MAAA,YAAA;AACA,OAAA,OAAA,MAAA,qBAAA;AAEA,OAAA,0BAAA,MAAA,gCAAA;AACA,SAAA,OAAA,QAAA,gBAAA;AACA,OAAA,KAAA,MAAA,iBAAA;AACA,OAAA,OAAA,MAAA,WAAA;AAEA,SAASA,KAAAA,IAAT,SAAA,QAAA,aAAA;;AAEA,SAAA,YAAA,CAAA,IAAA,EAuBG;AAAA,MAtBFC,IAsBE,GAAA,IAAA,CAtBFA,IAsBE;AAAA,MArBFC,MAqBE,GAAA,IAAA,CArBFA,MAqBE;AAAA,MApBFC,SAoBE,GAAA,IAAA,CApBFA,SAoBE;AAAA,MAnBFC,KAmBE,GAAA,IAAA,CAnBFA,KAmBE;AAAA,MAlBFC,WAkBE,GAAA,IAAA,CAlBFA,WAkBE;AAAA,MAjBFC,OAiBE,GAAA,IAAA,CAjBFA,OAiBE;AAAA,MAhBSE,SAgBT,GAAA,IAAA,CAhBFD,SAgBE;AAAA,MAbFE,SAaE,GAAA,IAAA,CAbFA,SAaE;AAAA,MAZFC,gBAYE,GAAA,IAAA,CAZFA,gBAYE;AAAA,MAXFC,YAWE,GAAA,IAAA,CAXFA,YAWE;AAAA,MAVFC,MAUE,GAAA,IAAA,CAVFA,MAUE;AAAA,MATFC,OASE,GAAA,IAAA,CATFA,OASE;AAAA,MARFC,iBAQE,GAAA,IAAA,CARFA,iBAQE;AAAA,MAPFC,iBAOE,GAAA,IAAA,CAPFA,iBAOE;AAAA,MANFC,cAME,GAAA,IAAA,CANFA,cAME;AAAA,MALFC,IAKE,GAAA,IAAA,CALFA,IAKE;AAAA,MAJGE,WAIH,GAAA,IAAA,CAJFD,GAIE;AAAA,MAHFE,UAGE,GAAA,IAAA,CAHFA,UAGE;AAAA,MAFFC,QAEE,GAAA,IAAA,CAFFA,QAEE;AAAA,MADCC,IACD,GAAA,wBAAA,CAAA,IAAA,EAAA,CAAA,MAAA,EAAA,QAAA,EAAA,WAAA,EAAA,OAAA,EAAA,aAAA,EAAA,SAAA,EAAA,WAAA,EAAA,WAAA,EAAA,kBAAA,EAAA,cAAA,EAAA,QAAA,EAAA,SAAA,EAAA,mBAAA,EAAA,mBAAA,EAAA,gBAAA,EAAA,MAAA,EAAA,KAAA,EAAA,YAAA,EAAA,UAAA,CAAA,CAAA,CAAA,CACF;;;AACA,MAAMC,gBAAAA,GAAmB,OAAA,CAAQ,YAAM;AACtC;AACA,QAAA,MAAA,EAAY;AACXV,MAAAA,OAAAA,GAAU,CAAVA,MAAU,CAAVA;AACA,KAJqC,CAKtC;;;AACA,WAAOA,OAAAA,CAAAA,MAAAA,CAAeW,OAAAA,CAAtB,gBAAsBA,EAAfX,CAAP;AANwB,GAAA,EAOtB,CAAA,MAAA,EAPH,OAOG,CAPsB,CAAzB,CAFE,CAcF;;AACA,MAAMY,OAAAA,GAAU,OAAA,CAAQ,YAAM;AAC7B,WAAOC,UAAAA,CAAAA,gBAAAA,EAAP,QAAOA,CAAP;AADe,GAAA,EAEb,CAAA,gBAAA,EAFH,QAEG,CAFa,CAAhB,CAfE,CAsBF;AACA;;AACAzB,EAAAA,IAAAA,GAAO,OAAA,CAAQ,YAAA;AAAA,WAAM0B,OAAAA,CAAN,IAAMA,CAAN;AAAR,GAAA,EAA6B,CAApC1B,IAAoC,CAA7B,CAAPA,CAxBE,CA0BF;;AACA,MAAM2B,UAAAA,GAAa,WAAA,CAAY,YAAM;AACpC,QAAIV,GAAAA,GAAM,CAACC,WAAAA,IAAeU,IAAAA,CAAhB,GAAgBA,EAAhB,IAAV,UAAA;AACA,QAAIC,WAAAA,GAAAA,KAAJ,CAAA;;AACA,QAAA,MAAA,EAAY;AACX,UAAIZ,GAAAA,IAAOjB,IAAAA,CAAX,OAAWA,EAAX,EAA2B;AAC1BiB,QAAAA,GAAAA,GAAMjB,IAAAA,CAANiB,OAAMjB,EAANiB;AACAY,QAAAA,WAAAA,GAAAA,IAAAA;AACA;AACD;;AACD,QAAIzB,WAAAA,KAAJ,SAAA,EAA+B;AAC9B,UAAM0B,MAAAA,GAAS9B,IAAAA,CAAAA,OAAAA,KAAiBI,WAAAA,GAAhC,IAAA;;AACA,UAAIa,GAAAA,GAAJ,MAAA,EAAkB;AACjBA,QAAAA,GAAAA,GAAAA,MAAAA;AACAY,QAAAA,WAAAA,GAAAA,IAAAA;AACA;AACD;;AAfmC,QAAA,eAAA,GAgBI,OAAA,CAAA,MAAA,CAAA,IAAA,EAAA,SAAA,EAAgC;AACvEI,MAAAA,mBAAAA,EADuE,IAAA;AAEvEhB,MAAAA,GAAAA,EAFuE,GAAA;AAGvEhB,MAAAA,MAAAA,EAHuE,MAAA;AAIvEE,MAAAA,KAAAA,EAAAA;AAJuE,KAAhC,CAhBJ;AAAA,QAAA,gBAAA,GAAA,cAAA,CAAA,eAAA,EAAA,CAAA,CAAA;AAAA,QAgB/B4B,aAhB+B,GAAA,gBAAA,CAAA,CAAA,CAAA;AAAA,QAgBhBC,gBAhBgB,GAAA,gBAAA,CAAA,CAAA,CAAA;;AAsBpC,QAAA,WAAA,EAAiB;AAChBA,MAAAA,gBAAAA,GAAAA,QAAAA;AADD,KAAA,MAEO;AACN;AACA;AACA;AACA;AACAA,MAAAA,gBAAAA,GAAmBjB,cAAAA,IAAAA,gBAAAA,IAAsC,KALnD,IAKNiB,CALM,CAK6D;AACnE;;AACD,WAAO,CAAA,aAAA,EAAgBf,GAAAA,GAAvB,gBAAO,CAAP;AA/BkB,GAAA,EAgChB,CAAA,IAAA,EAAA,MAAA,EAAA,SAAA,EAAA,cAAA,EAAA,KAAA,EAAA,WAAA,EAAA,OAAA,EAhCH,WAgCG,CAhCgB,CAAnB;AA2CA,MAAMiB,aAAAA,GAAgBC,MAAtB,EAAA;AACAD,EAAAA,aAAAA,CAAAA,OAAAA,GAAAA,UAAAA;;AAvEE,MAAA,QAAA,GAyEwCI,OAAAA,CAAAA,UAAAA,EAzExC,EAyEwCA,CAzExC;AAAA,MAAA,SAAA,GAAA,cAAA,CAAA,QAAA,EAAA,CAAA,CAAA;AAAA,MAyEKF,cAzEL,GAAA,SAAA,CAAA,CAAA,CAAA;AAAA,MAyEqBC,eAzErB,GAAA,SAAA,CAAA,CAAA,CAAA;;AAAA,MAAA,SAAA,GA0EwCG,QAAAA,CA1ExC,cA0EwCA,CA1ExC;AAAA,MAAA,UAAA,GAAA,cAAA,CAAA,SAAA,EAAA,CAAA,CAAA;AAAA,MA0EKT,aA1EL,GAAA,UAAA,CAAA,CAAA,CAAA;AAAA,MA0EoBQ,gBA1EpB,GAAA,UAAA,CAAA,CAAA,CAAA,CAAA,CA4EF;AACA;AACA;AACA;;;AA/EE,MAAA,UAAA,GAgFsDC,QAhFtD,EAAA;AAAA,MAAA,UAAA,GAAA,cAAA,CAAA,UAAA,EAAA,CAAA,CAAA;AAAA,MAgFKC,oBAhFL,GAAA,UAAA,CAAA,CAAA,CAAA;AAAA,MAgF2BC,uBAhF3B,GAAA,UAAA,CAAA,CAAA,CAAA;;AAkFF,MAAMC,OAAAA,GAAUR,MAAhB,EAAA;AAEAS,EAAAA,SAAAA,CAAU,YAAM;AACf,QAAA,IAAA,EAAU;AACTD,MAAAA,OAAAA,CAAAA,OAAAA,GAAkB,OAAA,CAAA,GAAA,CAAY;AAC7BE,QAAAA,YAAAA,EAAc,SAAA,YAAA,GAAA;AAAA,iBAAMX,aAAAA,CAAN,OAAMA,EAAN;AADe,SAAA;AAE7BY,QAAAA,QAAAA,EAF6B,gBAAA;AAG7BC,QAAAA,cAAAA,EAAgBV;AAHa,OAAZ,CAAlBM;AAKA,aAAO,YAAA;AAAA,eAAMA,OAAAA,CAAAA,OAAAA,CAAN,IAAMA,EAAN;AAAP,OAAA;AACA;AARFC,GAAAA,EASG,CATHA,IASG,CATHA,CAAAA;AAWAA,EAAAA,SAAAA,CAAU,YAAM;AACf,QAAID,OAAAA,CAAJ,OAAA,EAAqB;AACpBA,MAAAA,OAAAA,CAAAA,OAAAA,CAAAA,WAAAA;AADD,KAAA,MAEO;AAAA,UAAA,WAAA,GACkBhB,UADlB,EAAA;AAAA,UAAA,YAAA,GAAA,cAAA,CAAA,WAAA,EAAA,CAAA,CAAA;AAAA,UACCI,eADD,GAAA,YAAA,CAAA,CAAA,CAAA;;AAENQ,MAAAA,gBAAAA,CAAAA,eAAAA,CAAAA;AACA;AANFK,GAAAA,EAOG,CAPHA,UAOG,CAPHA,CAAAA;AASAA,EAAAA,SAAAA,CAAU,YAAM;AACfF,IAAAA,uBAAAA,CAAAA,IAAAA,CAAAA;AADDE,GAAAA,EAAAA,EAAAA,CAAAA,CAxGE,CA4GF;AACA;AACA;;AACA,MAAMI,oBAAAA,GAAuB,OAAA,CAAQ,YAAM;AAC1C,QAAI,OAAA,MAAA,KAAJ,WAAA,EAAmC;AAClC,aAAOC,0BAAAA,CAAAA,gBAAAA,EAAP,iBAAOA,CAAP;AACA;AAH2B,GAAA,EAI1B,CAAA,gBAAA,EAJH,iBAIG,CAJ0B,CAA7B,CA/GE,CAwHF;AACA;AACA;;AACA,MAAMC,WAAAA,GAAc,OAAA,CAAQ,YAAM;AACjC,QAAI,OAAA,MAAA,KAAJ,WAAA,EAAmC;AAClC,UAAA,iBAAA,EAAuB;AACtB,eAAOrC,iBAAAA,CAAP,IAAOA,CAAP;AACA;;AACD,aAAOmC,oBAAAA,CAAP,IAAOA,CAAP;AACA;AANkB,GAAA,EAOjB,CAAA,IAAA,EAAA,iBAAA,EAPH,oBAOG,CAPiB,CAApB;AAaA,MAAMG,MAAAA,GACL,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA,QAAA,CAAA;AACC,IAAA,IAAA,EADD,IAAA;AAEC,IAAA,WAAA,EAAaV,oBAAAA,GAAAA,WAAAA,GAFd,SAAA;AAGC,IAAA,OAAA,EAASpC;AAHV,GAAA,EAAA,IAAA,CAAA,EAKE0B,aALF,CADD;AAUA,MAAMqB,gBAAAA,GAAmB3C,gBAAAA,IAAzB,SAAA;;AAEA,MAAA,gBAAA,EAAsB;AACrB,WACC,KAAA,CAAA,aAAA,CAAA,gBAAA,EAAA,QAAA,CAAA,EAAA,EAAA,YAAA,EAAA;AAEC,MAAA,WAAA,EAAagC,oBAAAA,GAAAA,WAAAA,GAFd;AAAA,KAAA,CAAA,EAGEU,MAHF,CADD;AAOA;;AAED,SAAA,MAAA;AACA;;AAEDE,YAAAA,CAAAA,SAAAA,GAAyB;AACxB;AACA;AACArD,EAAAA,IAAAA,EAAMsD,SAAAA,CAAAA,SAAAA,CAAoB,CACzBA,SAAAA,CAAAA,UAAAA,CADyB,IACzBA,CADyB,EAEzBA,SAAAA,CAFKA,MAAoB,CAApBA,EAHkB,UAAA;AAQxB;AACA;AACA;AACA3C,EAAAA,MAAAA,EAAQ2C,SAAAA,CAXgB,MAAA;AAaxB;AACA;AACA;AACA;AACA1C,EAAAA,OAAAA,EAAS0C,SAAAA,CAAAA,OAAAA,CAAkBA,SAAAA,CAjBH,MAiBfA,CAjBe;AAmBxB;AACA;AACA;AACA;AACArD,EAAAA,MAAAA,EAAQqD,SAAAA,CAvBgB,IAAA;AAyBxB;AACA;AACA;AACApD,EAAAA,SAAAA,EA5BwB,SAAA;AA8BxB;AACA;AACA;AACAC,EAAAA,KAAAA,EAAOmD,SAAAA,CAjCiB,MAAA;AAmCxB;AACA;AACA;AACAlD,EAAAA,WAAAA,EAAakD,SAAAA,CAtCW,MAAA;AAwCxB;AACA;AACA;AACA;AACA;AACA;AACA;AACAhD,EAAAA,SAAAA,EAAWgD,SAAAA,CAAAA,WAAAA,CA/Ca,UAAA;AAiDxB;AACA;AACA;AACAjD,EAAAA,OAAAA,EAASiD,SAAAA,CAAAA,IAAAA,CApDe,UAAA;AAsDxB;AACA;AACAzC,EAAAA,iBAAAA,EAAmByC,SAAAA,CAxDK,IAAA;AA0DxB;AACA;AACAxC,EAAAA,iBAAAA,EAAmBwC,SAAAA,CA5DK,MAAA;AA8DxB;AACA;AACA;AACA;AACAvC,EAAAA,cAAAA,EAAgB,SAAA,CAAA,SAAA,CAAoB,CACnCuC,SAAAA,CADmC,MAAA,EAEnC,SAAA,CAAA,OAAA,CAAkB,SAAA,CAAA,KAAA,CAAgB;AACjCC,IAAAA,SAAAA,EAAWD,SAAAA,CADsB,MAAA;AAEjCE,IAAAA,QAAAA,EAAUF,SAAAA,CAAAA,MAAAA,CAAiBG;AAFM,GAAhB,CAAlB,CAFmC,CAApB,CAlEQ;AA0ExB;AACA;AACA;AACA;AACAzC,EAAAA,IAAAA,EAAMsC,SAAAA,CA9EkB,IAAA;AAgFxB;AACA;AACArC,EAAAA,GAAAA,EAAKqC,SAAAA,CAlFmB,MAAA;AAoFxB;AACA;AACAnC,EAAAA,UAAAA,EAAYmC,SAAAA,CAtFY,MAAA;AAwFxB;AACA;AACAlC,EAAAA,QAAAA,EAAUkC,SAAAA,CA1Fc,IAAA;AA4FxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA7C,EAAAA,gBAAAA,EAAkB6C,SAAAA,CArGM,WAAA;AAuGxB;AACA5C,EAAAA,YAAAA,EAAc4C,SAAAA,CAAUI;AAxGA,CAAzBL;AA2GAA,YAAAA,CAAAA,YAAAA,GAA4B;AAC3B;AACAzC,EAAAA,OAAAA,EAF2B,EAAA;AAI3B;AACAN,EAAAA,SAAAA,EAL2B,IAAA;AAO3B;AACAD,EAAAA,OAAAA,EAR2B,IAAA;AAU3B;AACA;AACAS,EAAAA,iBAAAA,EAAmB;AAClB6C,IAAAA,OAAAA,EADkB,MAAA;AAElBC,IAAAA,GAAAA,EAFkB,SAAA;AAGlBC,IAAAA,KAAAA,EAHkB,MAAA;AAIlBC,IAAAA,IAAAA,EAJkB,SAAA;AAKlBC,IAAAA,IAAAA,EALkB,SAAA;AAMlBC,IAAAA,MAAAA,EANkB,SAAA;AAOlBC,IAAAA,MAAAA,EAAQ,SAPU,CAQlB;;AARkB,GAZQ;AAuB3B;AACAjD,EAAAA,IAAAA,EAxB2B,IAAA;AA0B3B;AACAG,EAAAA,UAAAA,EAAY,CA3Be,CA8B5B;AACA;;AA/B4B,CAA5BkC;AAgCAA,YAAAA,GAAea,KAAAA,CAAAA,IAAAA,CAAfb,YAAea,CAAfb;AAEA,eAAA,YAAA,C,CAEA;AACA;AACA;;AACA,IAAMc,6BAAAA,GAAN,UAAA;;AACA,SAAA,sBAAA,CAAA,QAAA,EAA0C;AACxC,SAAOC,IAAAA,CAAAA,GAAAA,CAAAA,QAAAA,EAAP,6BAAOA,CAAP;AACD,C,CAED;;;AACA,IAAMC,IAAAA,GAAO,MAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAb,IAAA;AACA,IAAMC,QAAAA,GAAW,OAAjB,IAAA;;AAEA,SAAA,IAAA,CAAA,KAAA,EAMG;AAAA,MALFtE,IAKE,GAAA,KAAA,CALFA,IAKE;AAAA,MAJFkD,WAIE,GAAA,KAAA,CAJFA,WAIE;AAAA,MAHF7C,OAGE,GAAA,KAAA,CAHFA,OAGE;AAAA,MAFFkE,QAEE,GAAA,KAAA,CAFFA,QAEE;AAAA,MADClD,IACD,GAAA,wBAAA,CAAA,KAAA,EAAA,CAAA,MAAA,EAAA,aAAA,EAAA,SAAA,EAAA,UAAA,CAAA,CAAA;;AACF,MAAMmD,SAAAA,GAAY,OAAA,CAAQ,YAAA;AAAA,WAAMxE,IAAAA,CAAN,WAAMA,EAAN;AAAR,GAAA,EAAkC,CAApD,IAAoD,CAAlC,CAAlB;AACA,SACC,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA,QAAA,CAAA,EAAA,EAAA,IAAA,EAAA;AAEC,IAAA,QAAA,EAFD,SAAA;AAGC,IAAA,KAAA,EAAOK,OAAAA,GAAAA,WAAAA,GAHR;AAAA,GAAA,CAAA,EAIEkE,QAJF,CADD;AAQA;;AAEDE,IAAAA,CAAAA,SAAAA,GAAiB;AAChBzE,EAAAA,IAAAA,EAAMsD,SAAAA,CAAAA,UAAAA,CAAAA,IAAAA,EADU,UAAA;AAEhBJ,EAAAA,WAAAA,EAAaI,SAAAA,CAFG,MAAA;AAGhBjD,EAAAA,OAAAA,EAASiD,SAAAA,CAAAA,IAAAA,CAHO,UAAA;AAIhBiB,EAAAA,QAAAA,EAAUjB,SAAAA,CAAAA,MAAAA,CAAiBG;AAJX,CAAjBgB;AAOA,IAAMC,YAAAA,GAAe,IAArB,KAAqB,EAArB;;AACA,SAAA,UAAA,CAAA,gBAAA,EAAA,QAAA,EAAgD;AAC/C;AACA;AACA;AACA,MAAMC,GAAAA,GAAMC,MAAAA,CAAAA,gBAAAA,CAAAA,GAAAA,GAAAA,GAAiCA,MAAAA,CAA7C,QAA6CA,CAA7C;AACA,SAAOF,YAAAA,CAAAA,GAAAA,CAAAA,GAAAA,KACNA,YAAAA,CAAAA,GAAAA,CAAAA,GAAAA,EAAsB,IAAA,OAAA,CAAA,gBAAA,EAA8B;AAAEtD,IAAAA,QAAAA,EADvD;AACqD,GAA9B,CAAtBsD,CADD;AAEA","sourcesContent":["import React, { useEffect, useState, useRef, useCallback, useMemo } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport TimeAgo from 'javascript-time-ago'\r\n\r\nimport createVerboseDateFormatter from './helpers/verboseDateFormatter'\r\nimport { getDate } from './helpers/date'\r\nimport Cache from './helpers/cache'\r\nimport Updater from './Updater'\r\n\r\nimport { style as styleType } from './PropTypes'\r\n\r\nfunction ReactTimeAgo({\r\n\tdate,\r\n\tfuture,\r\n\ttimeStyle,\r\n\tround,\r\n\tminTimeLeft,\r\n\ttooltip,\r\n\tcomponent: Component,\r\n\t// `container` property name is deprecated, \r\n\t// use `wrapperComponent` property name instead.\r\n\tcontainer,\r\n\twrapperComponent,\r\n\twrapperProps,\r\n\tlocale,\r\n\tlocales,\r\n\tformatVerboseDate,\r\n\tverboseDateFormat,\r\n\tupdateInterval,\r\n\ttick,\r\n\tnow: nowProperty,\r\n\ttimeOffset,\r\n\tpolyfill,\r\n\t...rest\r\n}) {\r\n\t// Get the list of preferred locales.\r\n\tconst preferredLocales = useMemo(() => {\r\n\t\t// Convert `locale` to `locales`.\r\n\t\tif (locale) {\r\n\t\t\tlocales = [locale]\r\n\t\t}\r\n\t\t// Add `javascript-time-ago` default locale.\r\n\t\treturn locales.concat(TimeAgo.getDefaultLocale())\r\n\t}, [\r\n\t\tlocale,\r\n\t\tlocales\r\n\t])\r\n\r\n\t// Create `javascript-time-ago` formatter instance.\r\n\tconst timeAgo = useMemo(() => {\r\n\t\treturn getTimeAgo(preferredLocales, polyfill)\r\n\t}, [\r\n\t\tpreferredLocales,\r\n\t\tpolyfill\r\n\t])\r\n\r\n\t// The date or timestamp that was passed.\r\n\t// Convert timestamp to `Date`.\r\n\tdate = useMemo(() => getDate(date), [date])\r\n\r\n\t// Formats the `date`.\r\n\tconst formatDate = useCallback(() => {\r\n\t\tlet now = (nowProperty || Date.now()) - timeOffset\r\n\t\tlet stopUpdates\r\n\t\tif (future) {\r\n\t\t\tif (now >= date.getTime()) {\r\n\t\t\t\tnow = date.getTime()\r\n\t\t\t\tstopUpdates = true\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (minTimeLeft !== undefined) {\r\n\t\t\tconst maxNow = date.getTime() - minTimeLeft * 1000\r\n\t\t\tif (now > maxNow) {\r\n\t\t\t\tnow = maxNow\r\n\t\t\t\tstopUpdates = true\r\n\t\t\t}\r\n\t\t}\r\n\t\tlet [formattedDate, timeToNextUpdate] = timeAgo.format(date, timeStyle, {\r\n\t\t\tgetTimeToNextUpdate: true,\r\n\t\t\tnow,\r\n\t\t\tfuture,\r\n\t\t\tround\r\n\t\t})\r\n\t\tif (stopUpdates) {\r\n\t\t\ttimeToNextUpdate = INFINITY\r\n\t\t} else {\r\n\t\t\t// Legacy compatibility: there used to be an `updateInterval` property.\r\n\t\t\t// That was before `getTimeToNextUpdate` feature was introduced in `javascript-time-ago`.\r\n\t\t\t// A default interval of one minute is introduced because\r\n\t\t\t// `getTimeToNextUpdate` feature may theoretically return `undefined`.\r\n\t\t\ttimeToNextUpdate = updateInterval || timeToNextUpdate || 60 * 1000 // A minute by default.\r\n\t\t}\r\n\t\treturn [formattedDate, now + timeToNextUpdate]\r\n\t}, [\r\n\t\tdate,\r\n\t\tfuture,\r\n\t\ttimeStyle,\r\n\t\tupdateInterval,\r\n\t\tround,\r\n\t\tminTimeLeft,\r\n\t\ttimeAgo,\r\n\t\tnowProperty\r\n\t])\r\n\r\n\tconst formatDateRef = useRef()\r\n\tformatDateRef.current = formatDate\r\n\r\n\tconst [_formattedDate, _nextUpdateTime] = useMemo(formatDate, [])\r\n\tconst [formattedDate, setFormattedDate] = useState(_formattedDate)\r\n\r\n\t// The component sets the \"verbose date\" tooltip after the component \r\n\t// has mounted rather than on the first render. \r\n\t// The reason is that otherwise React would complain that \r\n\t// server-side-rendered markup doesn't match client-side-rendered one.\r\n\tconst [shouldSetTooltipText, setShouldSetTooltipText] = useState()\r\n\r\n\tconst updater = useRef()\r\n\r\n\tuseEffect(() => {\r\n\t\tif (tick) {\r\n\t\t\tupdater.current = Updater.add({\r\n\t\t\t\tgetNextValue: () => formatDateRef.current(),\r\n\t\t\t\tsetValue: setFormattedDate,\r\n\t\t\t\tnextUpdateTime: _nextUpdateTime\r\n\t\t\t})\r\n\t\t\treturn () => updater.current.stop()\r\n\t\t}\r\n\t}, [tick])\r\n\r\n\tuseEffect(() => {\r\n\t\tif (updater.current) {\r\n\t\t\tupdater.current.forceUpdate()\r\n\t\t} else {\r\n\t\t\tconst [formattedDate] = formatDate()\r\n\t\t\tsetFormattedDate(formattedDate)\r\n\t\t}\r\n\t}, [formatDate])\r\n\r\n\tuseEffect(() => {\r\n\t\tsetShouldSetTooltipText(true)\r\n\t}, [])\r\n\r\n\t// Create verbose date formatter for the tooltip text.\r\n\t// (only on client side, because tooltips aren't rendered \r\n\t//  until triggered by user interaction)\r\n\tconst verboseDateFormatter = useMemo(() => {\r\n\t\tif (typeof window !== 'undefined') {\r\n\t\t\treturn createVerboseDateFormatter(preferredLocales, verboseDateFormat)\r\n\t\t}\r\n\t}, [\r\n\t\tpreferredLocales,\r\n\t\tverboseDateFormat\r\n\t])\r\n\r\n\t// Format verbose date for the tooltip.\r\n\t// (only on client side, because tooltips aren't rendered \r\n\t//  until triggered by user interaction)\r\n\tconst verboseDate = useMemo(() => {\r\n\t\tif (typeof window !== 'undefined') {\r\n\t\t\tif (formatVerboseDate) {\r\n\t\t\t\treturn formatVerboseDate(date)\r\n\t\t\t}\r\n\t\t\treturn verboseDateFormatter(date)\r\n\t\t}\r\n\t}, [\r\n\t\tdate,\r\n\t\tformatVerboseDate,\r\n\t\tverboseDateFormatter\r\n\t])\r\n\r\n\tconst result = (\r\n\t\t<Component\r\n\t\t\tdate={date}\r\n\t\t\tverboseDate={shouldSetTooltipText ? verboseDate : undefined}\r\n\t\t\ttooltip={tooltip}\r\n\t\t\t{...rest}>\r\n\t\t\t{formattedDate}\r\n\t\t</Component>\r\n\t)\r\n\r\n\tconst WrapperComponent = wrapperComponent || container\r\n\r\n\tif (WrapperComponent) {\r\n\t\treturn (\r\n\t\t\t<WrapperComponent\r\n\t\t\t\t{...wrapperProps}\r\n\t\t\t\tverboseDate={shouldSetTooltipText ? verboseDate : undefined}>\r\n\t\t\t\t{result}\r\n\t\t\t</WrapperComponent>\r\n\t\t)\r\n\t}\r\n\r\n\treturn result\r\n}\r\n\r\nReactTimeAgo.propTypes = {\r\n\t// The `date` or `timestamp`.\r\n\t// E.g. `new Date()` or `1355972400000`.\r\n\tdate: PropTypes.oneOfType([\r\n\t\tPropTypes.instanceOf(Date),\r\n\t\tPropTypes.number\r\n\t]).isRequired,\r\n\r\n\t// Preferred locale.\r\n\t// Is 'en' by default.\r\n\t// E.g. 'ru-RU'.\r\n\tlocale: PropTypes.string,\r\n\r\n\t// Alternatively to `locale`, one could pass `locales`:\r\n\t// A list of preferred locales (ordered).\r\n\t// Will choose the first supported locale from the list.\r\n\t// E.g. `['ru-RU', 'en-GB']`.\r\n\tlocales: PropTypes.arrayOf(PropTypes.string),\r\n\r\n\t// If set to `true`, then will stop at \"zero point\"\r\n\t// when going from future dates to past dates.\r\n\t// In other words, even if the `date` has passed,\r\n\t// it will still render as if `date` is `now`.\r\n\tfuture: PropTypes.bool,\r\n\r\n\t// Date/time formatting style.\r\n\t// See `javascript-time-ago` docs on \"Styles\" for more info.\r\n\t// E.g. 'round', 'round-minute', 'twitter', 'twitter-first-minute'.\r\n\ttimeStyle: styleType,\r\n\r\n\t// `round` parameter of `javascript-time-ago`.\r\n\t// See `javascript-time-ago` docs on \"Rounding\" for more info.\r\n\t// Examples: \"round\", \"floor\".\r\n\tround: PropTypes.string,\r\n\r\n\t// If specified, the time won't \"tick\" past this threshold (in seconds).\r\n\t// For example, if `minTimeLeft` is `60 * 60`\r\n\t// then the time won't \"tick\" past \"in 1 hour\".\r\n\tminTimeLeft: PropTypes.number,\r\n\r\n\t// A React component to render the relative time label.\r\n\t// Receives properties:\r\n\t// * date: Date — The date.\r\n\t// * verboseDate: string? — Formatted verbose date. Is always present on client, is always `undefined` on server (because tooltips aren't shown on server).\r\n\t// * tooltip: boolean — The `tooltip` property of `<ReactTimeAgo/>` component.\r\n\t// * children: string — The relative time label.\r\n\t// * All \"unknown\" properties that have been passed to `<ReactTimeAgo/>` are passed through to this component.\r\n\tcomponent: PropTypes.elementType.isRequired,\r\n\r\n\t// Whether to use HTML `tooltip` attribute to show a verbose date tooltip.\r\n\t// Is `true` by default.\r\n\t// Can be set to `false` to disable the native HTML `tooltip`.\r\n\ttooltip: PropTypes.bool.isRequired,\r\n\r\n\t// Verbose date formatter.\r\n\t// By default it's `(date) => new Intl.DateTimeFormat(locale, {…}).format(date)`.\r\n\tformatVerboseDate: PropTypes.func,\r\n\r\n\t// `Intl.DateTimeFormat` format for formatting verbose date.\r\n\t// See `Intl.DateTimeFormat` docs for more info.\r\n\tverboseDateFormat: PropTypes.object,\r\n\r\n\t// (deprecated)\r\n\t// How often the component refreshes itself.\r\n\t// Instead, consider using `getNextTimeToUpdate()` feature\r\n\t// of `javascript-time-ago` styles.\r\n\tupdateInterval: PropTypes.oneOfType([\r\n\t\tPropTypes.number,\r\n\t\tPropTypes.arrayOf(PropTypes.shape({\r\n\t\t\tthreshold: PropTypes.number,\r\n\t\t\tinterval: PropTypes.number.isRequired\r\n\t\t}))\r\n\t]),\r\n\r\n\t// (deprecated).\r\n\t// Set to `false` to disable automatic refresh of the component.\r\n\t// Is `true` by default.\r\n\t// I guess no one actually turns that off.\r\n\ttick: PropTypes.bool,\r\n\r\n\t// Allows setting a custom baseline for relative time measurement.\r\n\t// https://gitlab.com/catamphetamine/react-time-ago/-/issues/4\r\n\tnow: PropTypes.number,\r\n\r\n\t// Allows offsetting the `date` by an arbitrary amount of milliseconds.\r\n\t// https://gitlab.com/catamphetamine/react-time-ago/-/issues/4\r\n\ttimeOffset: PropTypes.number,\r\n\r\n\t// Pass `false` to use native `Intl.RelativeTimeFormat` / `Intl.PluralRules`\r\n\t// instead of the polyfilled ones in `javascript-time-ago`.\r\n\tpolyfill: PropTypes.bool,\r\n\r\n\t// (advanced)\r\n\t// A React Component to wrap the resulting `<time/>` React Element.\r\n\t// Receives `verboseDate` and `children` properties.\r\n\t// Also receives `wrapperProps`, if they're passed.\r\n\t// `verboseDate` can be used for displaying verbose date label\r\n\t// in an \"on mouse over\" (or \"on touch\") tooltip.\r\n\t// See the \"Tooltip\" readme section for more info.\r\n\t// Another example could be having `wrapperComponent`\r\n\t// being rerendered every time the component refreshes itself.\r\n\twrapperComponent: PropTypes.elementType,\r\n\r\n\t// Custom `props` passed to `wrapperComponent`.\r\n\twrapperProps: PropTypes.object\r\n}\r\n\r\nReactTimeAgo.defaultProps = {\r\n\t// No preferred locales.\r\n\tlocales: [],\r\n\r\n\t// Use a `<time/>` tag by default.\r\n\tcomponent: Time,\r\n\r\n\t// Use HTML `tooltip` attribute to show a verbose date tooltip.\r\n\ttooltip: true,\r\n\r\n\t// `Intl.DateTimeFormat` for verbose date.\r\n\t// Example: \"Thursday, December 20, 2012, 7:00:00 AM GMT+4\"\r\n\tverboseDateFormat: {\r\n\t\tweekday: 'long',\r\n\t\tday: 'numeric',\r\n\t\tmonth: 'long',\r\n\t\tyear: 'numeric',\r\n\t\thour: 'numeric',\r\n\t\tminute: '2-digit',\r\n\t\tsecond: '2-digit',\r\n\t\t// timeZoneName: 'short'\r\n\t},\r\n\r\n\t// Automatically refreshes itself.\r\n\ttick: true,\r\n\r\n\t// No time offset.\r\n\ttimeOffset: 0\r\n}\r\n\r\n// The component schedules a next refresh every time it renders.\r\n// There's no need to rerender this component unless its props change.\r\nReactTimeAgo = React.memo(ReactTimeAgo)\r\n\r\nexport default ReactTimeAgo\r\n\r\n// `setTimeout()` has a bug where it fires immediately\r\n// when the interval is longer than about `24.85` days.\r\n// https://stackoverflow.com/questions/3468607/why-does-settimeout-break-for-large-millisecond-delay-values\r\nconst SET_TIMEOUT_MAX_SAFE_INTERVAL = 2147483647\r\nfunction getSafeTimeoutInterval(interval) {\r\n  return Math.min(interval, SET_TIMEOUT_MAX_SAFE_INTERVAL)\r\n}\r\n\r\n// A thousand years is practically a metaphor for \"infinity\".\r\nconst YEAR = 365 * 24 * 60 * 60 * 1000\r\nconst INFINITY = 1000 * YEAR\r\n\r\nfunction Time({\r\n\tdate,\r\n\tverboseDate,\r\n\ttooltip,\r\n\tchildren,\r\n\t...rest\r\n}) {\r\n\tconst isoString = useMemo(() => date.toISOString(), [date])\r\n\treturn (\r\n\t\t<time\r\n\t\t\t{...rest}\r\n\t\t\tdateTime={isoString}\r\n\t\t\ttitle={tooltip ? verboseDate : undefined}>\r\n\t\t\t{children}\r\n\t\t</time>\r\n\t)\r\n}\r\n\r\nTime.propTypes = {\r\n\tdate: PropTypes.instanceOf(Date).isRequired,\r\n\tverboseDate: PropTypes.string,\r\n\ttooltip: PropTypes.bool.isRequired,\r\n\tchildren: PropTypes.string.isRequired\r\n}\r\n\r\nconst TimeAgoCache = new Cache()\r\nfunction getTimeAgo(preferredLocales, polyfill) {\r\n\t// `TimeAgo` instance creation is (hypothetically) assumed\r\n\t// a lengthy operation so the instances are cached and reused.\r\n\t// https://gitlab.com/catamphetamine/react-time-ago/-/issues/1\r\n\tconst key = String(preferredLocales) + ':' + String(polyfill)\r\n\treturn TimeAgoCache.get(key) ||\r\n\t\tTimeAgoCache.put(key, new TimeAgo(preferredLocales, { polyfill }))\r\n}"]},"metadata":{},"sourceType":"module"}